# Copyright (C) 2022 - Kha Tran

""" Dependencies Checking Handler source code """

from __future__ import annotations

import os
import logging
import subprocess
import sys

from multiprocessing.dummy import Array

from Util.log import LOGGER

logging.basicConfig(level=logging.DEBUG)


ROOT_DIRECTORY: str = os.path.dirname(
    os.path.dirname(os.path.abspath(__file__)))

REQUIREMENTS_FILE: str = os.path.join(ROOT_DIRECTORY, "requirements.txt")

PYTHON2: int = 2
PYTHON3: int = 3


class Dependency():

    def __init__(self, file: str | None = None) -> None:
        self.file = file if file is not None else REQUIREMENTS_FILE

    # Read the specified file
    def read_file(self) -> Array:
        with open(f"{REQUIREMENTS_FILE}", "r") as f:
            return f.readlines()

    # Validate python version
    def which_python(self) -> bool:
        return sys.version_info.major == PYTHON3

    # Run the Dependency
    def run(self) -> None:
        for i in self.read_file():
            dep: str = i.split("==")[0]
            ver: str = i.split("==")[1]

            if not self.validate_deps(dep):
                LOGGER.info(
                    f"[bold yellow] {dep} not found, start installing {dep} ver {ver}...[/]", extra={"markup": True})
                subprocess.run(f"python{PYTHON3}", "-m",
                               "pip", "install", f"{dep}")

    # Validate the dependencies
    def validate_deps(self, dep) -> bool:
        res = subprocess.Popen(
            f"pip3 show {dep}", shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)

        return True if len(res.stdout.readlines()) > 0 else False
